rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSame(map1, map2) {
      return map1.keys().hasAll(map2.keys()) && map1.keys().hasOnly(map2.keys());
    }

    function isUpdatingSingleField(fieldName) {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys;
      return changedKeys.size() == 1 && changedKeys.has(fieldName);
    }
    
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    match /animes/{animeId} {
      allow read: if true;
      allow create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      allow update: if (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
                    || (
                      isUpdatingSingleField('views') &&
                      request.resource.data.views == resource.data.views + 1
                    );
    }

    match /ads/{adId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
